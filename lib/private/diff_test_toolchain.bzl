"Setup a diffutils toolchain repositories and rules"

load(":repo_utils.bzl", "repo_utils")

DIFFUTILS_PLATFORMS = {
    "darwin_amd64": struct(
        release_platform = "x86_64-apple-darwin",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        release_platform = "aarch64-apple-darwin",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        release_platform = "x86_64-unknown-linux-gnu",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "windows_amd64": struct(
        release_platform = "x86_64-pc-windows-msvc",
        archive_extension = "zip",
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

DIFFUTILS_VERSION = "0.4.2"

# https://github.com/uutils/diffutils/releases
#
# The integrity hashes can be computed with
# shasum -b -a 384 [downloaded file] | awk '{ print $1 }' | xxd -r -p | base64
DIFFUTILS_INTEGRITIES = {
    "aarch64-apple-darwin": "sha384-m5EzRSRFl5NE8bFw+9rV4n06OeMY/tpieZiQepbpDp7/prL2Zr6sw4LWnfhZC+15",
    "x86_64-apple-darwin": "sha384-tj3xGzlcdggMrIdrqnrK468cReGkKNQW1ZbKinOHMiMhhILuB1lzyzO2Jmfj9/GM",
    "x86_64-pc-windows-msvc": "sha384-kHUBxaHOZPqiXd0exGQsQEPDrDb0O0boAFu6KWSE3K2i1OO5bzwyz8VhmjHlvjGv",
    "x86_64-unknown-linux-gnu": "sha384-7qAQT0YR+zaGDPLYkHcBxLzVI+0lwHQx/VMkgEmvgVXkCntM3xaRjUov1Eyz1VBN",
}

DiffInfo = provider(
    doc = "Provide info for executing diff",
    fields = {
        "bin": "Executable diff binary",
    },
)

def _diff_toolchain_impl(ctx):
    binary = ctx.file.bin

    # Make the $(DIFFUTILS_BIN) variable available in places like genrules.
    # See https://docs.bazel.build/versions/main/be/make-variables.html#custom_variables
    template_variables = platform_common.TemplateVariableInfo({
        "DIFFUTILS_BIN": binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    diff_info = DiffInfo(
        bin = binary,
    )

    # Export all the providers inside our ToolchainInfo
    # so the resolved_toolchain rule can grab and re-export them.
    toolchain_info = platform_common.ToolchainInfo(
        diffinfo = diff_info,
        template_variables = template_variables,
        default = default_info,
    )

    return [default_info, toolchain_info, template_variables]

diff_toolchain = rule(
    implementation = _diff_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
        ),
    },
)

def _diffutils_toolchains_repo_impl(rctx):
    # Expose a concrete toolchain which is the result of Bazel resolving the toolchain
    # for the execution or target platform.
    # Workaround for https://github.com/bazelbuild/bazel/issues/14009
    starlark_content = """# @generated by @aspect_bazel_lib//lib/private:diff_test_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@aspect_bazel_lib//lib:diffutils_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.diffinfo,
        toolchain_info.template_variables,
    ]

# Copied from java_toolchain_alias
# https://cs.opensource.google/bazel/bazel/+/master:tools/jdk/java_toolchain_alias.bzl
resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@aspect_bazel_lib//lib:diffutils_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @aspect_bazel_lib//lib/private:diff_test_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the diff_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in DIFFUTILS_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:diff_toolchain",
    toolchain_type = "@aspect_bazel_lib//lib:diffutils_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

diffutils_toolchains_repo = repository_rule(
    _diffutils_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _diffutils_platform_repo_impl(rctx):
    is_windows = rctx.attr.platform.startswith("windows_")
    meta = DIFFUTILS_PLATFORMS[rctx.attr.platform]
    release_platform = meta.release_platform if hasattr(meta, "release_platform") else rctx.attr.platform
    archive_extension = meta.archive_extension if hasattr(meta, "archive_extension") else "tar.xz"

    url = "https://github.com/uutils/diffutils/releases/download/v{0}/diffutils-{1}.{2}".format(
        DIFFUTILS_VERSION,
        release_platform,
        archive_extension,
    )

    rctx.download_and_extract(
        url = url,
        strip_prefix = "diffutils-{0}".format(release_platform),
        integrity = DIFFUTILS_INTEGRITIES[release_platform],
    )
    build_content = """# @generated by @aspect_bazel_lib//lib/private:diff_test_toolchain.bzl
load("@aspect_bazel_lib//lib/private:diff_test_toolchain.bzl", "diff_toolchain")
exports_files(["{0}"])
diff_toolchain(name = "diff_toolchain", bin = "{0}", visibility = ["//visibility:public"])
""".format("diffutils.exe" if is_windows else "diffutils")

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

diffutils_platform_repo = repository_rule(
    implementation = _diffutils_platform_repo_impl,
    doc = "Fetch external tools needed for diff toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = DIFFUTILS_PLATFORMS.keys()),
    },
)

def _diffutils_host_alias_repo(rctx):
    ext = ".exe" if repo_utils.is_windows(rctx) else ""

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", """# @generated by @aspect_bazel_lib//lib/private:diff_test_toolchain.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["diff{ext}"])
""".format(
        ext = ext,
    ))

    rctx.symlink("../{name}_{platform}/diff{ext}".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
        ext = ext,
    ), "diff{ext}".format(ext = ext))

diffutils_host_alias_repo = repository_rule(
    _diffutils_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD.bazel file that exports symlinks to the host platform's binaries
    """,
)
